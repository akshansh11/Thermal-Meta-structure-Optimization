# -*- coding: utf-8 -*-
"""main_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j3jJJl20GEbevzRJwVQBgx4YuFixSM5W
"""

import streamlit as st
import numpy as np
from scipy.sparse import csc_matrix, diags
from scipy.sparse.linalg import spsolve
import matplotlib.pyplot as plt
from PIL import Image
import io

class ThermalTopologyOptimization:
    def __init__(self, nelx, nely, volfrac, penal, rmin):
        self.nelx = nelx
        self.nely = nely
        self.volfrac = volfrac
        self.penal = penal
        self.rmin = rmin
        self.x = volfrac * np.ones(nely*nelx)
        self.dc = np.zeros(nely*nelx)
        self.ke = self.lk()
        self.iter = 0

    # [Previous methods remain the same until optimize_with_animation]

    def create_frame(self, x):
        fig, ax = plt.subplots(figsize=(10, 6))
        im = ax.imshow(x.reshape(self.nely, self.nelx),
                      cmap='magma',
                      interpolation='none',
                      vmin=0, vmax=1)
        plt.colorbar(im, ax=ax, label='Material Density')
        ax.set_title(f'Thermal Meta-structure Design\nIteration {self.iter}')
        ax.set_xlabel('X coordinate')
        ax.set_ylabel('Y coordinate')
        
        # Convert plot to image
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight')
        plt.close(fig)
        buf.seek(0)
        return Image.open(buf)

    def optimize_with_frames(self, progress_bar):
        frames = []
        loop = 0
        change = 1
        maxiter = 100
        
        while change > 0.01 and loop < maxiter:
            loop += 1
            self.iter = loop
            
            U = self.FE(self.x)
            c = np.sum(self.compute_compliance(self.x, U))
            dc = -self.penal * (self.x**(self.penal-1)) * self.compute_compliance(self.x, U)
            dc = self.filter_sensitivity(dc)
            
            xold = self.x.copy()
            self.x = self.OC(self.x, dc)
            
            change = np.linalg.norm(self.x - xold)/np.linalg.norm(self.x)
            
            # Create and store frame
            frames.append(self.create_frame(self.x))
            progress_bar.progress(loop/maxiter)
            
        return frames

def main():
    st.set_page_config(page_title="Thermal Meta-structure Optimization", layout="wide")
    
    st.title("Thermal Meta-structure Topology Optimization")
    st.markdown("Adjust parameters and optimize to see the design evolution.")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        nelx = st.slider("Width", 20, 100, 60)
        nely = st.slider("Height", 20, 100, 30)
    
    with col2:
        volfrac = st.slider("Volume Fraction", 0.1, 0.9, 0.4)
        penal = st.slider("Penalization", 1.0, 5.0, 3.0)
    
    with col3:
        rmin = st.slider("Filter Radius", 1.0, 3.0, 1.5)
        
    if st.button("Optimize", type="primary"):
        optimizer = ThermalTopologyOptimization(nelx, nely, volfrac, penal, rmin)
        
        progress_bar = st.progress(0)
        status = st.empty()
        
        status.text('Optimizing...')
        frames = optimizer.optimize_with_frames(progress_bar)
        
        # Save as GIF
        gif_path = "optimization.gif"
        frames[0].save(
            gif_path,
            save_all=True,
            append_images=frames[1:],
            duration=200,
            loop=0
        )
        
        status.text('Optimization complete!')
        
        # Display final GIF
        with open(gif_path, 'rb') as f:
            gif_bytes = f.read()
            
        st.image(gif_bytes, caption='Optimization Progress', use_column_width=True)
        
        # Download button
        st.download_button(
            label="Download Animation",
            data=gif_bytes,
            file_name="topology_optimization.gif",
            mime="image/gif"
        )

if __name__ == "__main__":
    main()
